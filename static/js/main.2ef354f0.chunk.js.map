{"version":3,"sources":["constants.js","Header/styled.js","Header/Header.js","mapStyles.js","styled.js","App.js","serviceWorker.js","index.js"],"names":["center","lat","lng","start","finish","treasures","position","path","decode","map","elem","latitude","longitude","StyledHeader","styled","div","_templateObject","Logo","img","_templateObject2","Menu","_templateObject3","Search","_templateObject4","Header","react_default","a","createElement","src","React","Component","mapStyles","featureType","stylers","visibility","StyledApp","styled_templateObject","App","state","location","constants","infoWindowOpen","markers","mapLoaded","_this","movedMap","forEach","treasure","index","isCloseEnough","setAnimation","window","google","maps","Animation","BOUNCE","setState","getCenter","geometry","spherical","computeDistanceBetween","LatLng","clickTreasure","id","process","SERVER_URL","markerLoaded","marker","prevProps","_this2","this","_this$state","Header_Header","reactgooglemapsapi_es_production","mapContainerClassName","zoom","options","disableDefaultUI","styles","onCenterChanged","onLoad","icon","url","size","height","width","origin","x","y","anchor","zIndex","animation","DROP","key","onClick","strokeColor","strokeOpacity","strokeWeight","onCloseClick","pixelOffset","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ef354f0.chunk.js","sourcesContent":["import { decode } from \"google-maps-polyutil/lib/PolyUtil\";\n\nexport const center = {\n  lat: 37.9233533,\n  lng: -122.6288527,\n};\n\nexport const start ={\n  lat: 37.9365183,\n  lng: -122.6380409,\n};\n\nexport const finish = {\n  lat: 37.9107966,\n  lng: -122.6126991,\n};\n\nexport const treasures = [\n  {\n    position: {\n      lat: 37.927785,\n      lng: -122.633525,\n    },\n  },\n  {\n    position: {\n      lat: 37.924491,\n      lng: -122.630962,\n    },\n  },\n  {\n    position: {\n      lat: 37.916264,\n      lng: -122.622794,\n    },\n  },\n];\n\nexport const path = decode(\"gnpfFvvokVEGBG@OE]C]@ML]RIL@RJ\\\\LXDNDPJLHPBJU@SDIRQZ[NWBc@Ja@NYTe@^IRAFGFG^AZBj@EDCPGHMV?`AOLBj@ETGRIH@LGBBHDFAH?J[FAB^PTB?@[HWNIFB@HNGNCLKJKDDIVANERDZFRTg@LOJUb@e@TQRSJITGTS?KIKKE?GFCFAP@BCCMJCHIPQLKRIXC\\\\C\\\\YRW\\\\i@X_@RGn@LPD^IREbA]`@Of@]VId@?^Fx@Bf@Az@IV?^Hb@@h@@^D`@B`A@d@[RQLS@e@N_@F_@Dk@Nu@Rg@F[?KEUNEJEFIJENKLMPIHKR]Ha@?YECGDCIFKC?GFEEKBCBCCDO@QPa@R]BW?SOe@@[PU@i@A[BIJEEI_@CI^ENCFCAESGQCi@DMPCNELA`@c@PY\\\\]PI^SJGLALIDMPe@BSJU@k@Dw@Gg@A]EO@c@HKHCb@M\\\\?N@t@BVCNGVa@Vk@T]RABPPZRHH?^M\\\\EVOVCPERMZQNOHQJMNUTI\\\\?RIf@GJE`@IJAHIf@KZ?H?TGXKJOLOTMHWNQTKLOLEd@WRSNQJG^G^MTGX@ZAFICKF]BWDWA[DK^AVa@ZUTQJCJEH@PFLALMHOLGV?LAHJRETK^Q~@e@v@Kp@WRWJERUD?HIF[J]@YCaA@SEQ?ODi@@c@Jc@J[H[BYJU\\\\[NSHURSPQAUD_@J[L[NUFMCIMKCMBGRe@@o@@g@To@Fe@Zm@R]NMJYVc@RUDONSTGf@UNIBOHQ^u@Tg@V{@F_@@a@AQGa@U]WOQ[GWCq@Dk@N_@hAy@bA_@l@]AE\")\n  .map((elem) => ({ lat: elem.latitude, lng: elem.longitude }));\n\nexport const treasureIcon = {\n  anchor: { x: 11, y: 11 },\n  path: \"M15.5 0L0 8.75008V26.25L15.5 35L31 26.25V8.75008L15.5 0ZM2.93697 18.665C2.27946 18.665 1.74652 18.1434 1.74652 17.5C1.74652 16.8567 2.27946 16.335 2.93697 16.335C3.59455 16.335 4.12746 16.8567 4.12746 17.5C4.12746 18.1434 3.59455 18.665 2.93697 18.665ZM16.8251 23.4101V27.5753H14.2953V23.4101H8.24608L15.5406 7.47891L22.8352 23.4101H16.8251ZM28.1641 18.665C27.5066 18.665 26.9736 18.1434 26.9736 17.5C26.9736 16.8567 27.5066 16.335 28.1641 16.335C28.8216 16.335 29.3546 16.8567 29.3546 17.5C29.3546 18.1434 28.8216 18.665 28.1641 18.665Z\",\n  fillColor: '#3C64F4',\n  fillOpacity: 1,\n  strokeColor: 'white',\n  scale: 1\n};\n","import styled from 'styled-components';\n\nexport const StyledHeader = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  background-color: #222;\n  height: 53px;\n  overflow: visible;\n  align-items: center;\n  z-index: 5000;\n  flex: 0 1 auto;\n`;\n\nexport const Logo = styled.img`\n  align-self: start;\n  width: 64px;\n  height: 64px;\n`;\n\nexport const Menu = styled.img`\n  width: 48px;\n  height: 48px;\n`;\n\nexport const Search = styled.img`\n  width: 48px;\n  height: 48px;\n`;\n","import React from 'react';\nimport { Logo, Search, Menu, StyledHeader } from './styled';\n\nexport default class Header extends React.Component {\n\n  render() {\n    return (\n      <StyledHeader>\n        <Menu src='menu.jpg'/>\n        <Logo src='logo.png'/>\n        <Search src='search.jpg'/>\n      </StyledHeader>\n    );\n  }\n}\n","export const mapStyles = [\n  {\n    \"featureType\": \"administrative\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape.man_made\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi.park\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  }\n];\n","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import React from 'react';\nimport { geolocated } from 'react-geolocated';\nimport { GoogleMap, Marker, Polyline, InfoWindow, Circle } from '@react-google-maps/api'\n\nimport * as constants from './constants';\nimport './App.css';\nimport Header from './Header/Header';\nimport { mapStyles } from './mapStyles';\nimport { StyledApp } from './styled';\n\nclass App extends React.Component {\n  state = {\n    location: {\n      lat: constants.center.lat,\n      lng: constants.center.lng,\n    },\n    infoWindowOpen: null,\n  };\n\n  markers = {};\n\n  componentDidUpdate(prevProps) {\n  }\n\n  componentDidMount(){\n  }\n\n  mapLoaded = (map) => {\n    this.map = map;\n  };\n\n  movedMap = () => {\n    constants.treasures.forEach((treasure, index) => {\n      if (this.isCloseEnough(treasure)) {\n        this.markers[index].setAnimation(window.google.maps.Animation.BOUNCE);\n      } else {\n        this.markers[index].setAnimation(null);\n      }\n    });\n\n    this.setState({ location: { lng: this.map.getCenter().lng(), lat: this.map.getCenter().lat() } });\n  };\n\n  isCloseEnough = (treasure) => {\n    const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\n      new window.google.maps.LatLng(this.state.location),\n      new window.google.maps.LatLng(treasure.position));\n\n    return distance < 100;\n  };\n\n  clickTreasure = (id) => {\n    if (id === null) {\n      this.setState({infoWindowOpen: null});\n      return;\n    }\n\n    if (!this.isCloseEnough(constants.treasures[id])) {\n      this.setState({infoWindowOpen: id});\n    } else {\n      window.location = process.env.SERVER_URL || 'http://6d84f684.ngrok.io';\n    }\n  };\n\n  markerLoaded = (id, marker) => {\n    this.markers[id] = marker;\n  };\n\n  render() {\n    const { location, infoWindowOpen } = this.state;\n\n    return (\n      <StyledApp>\n        <Header/>\n\n        <GoogleMap\n          id=\"circle-example\"\n          mapContainerClassName='mapClass'\n          zoom={13.5}\n          center={constants.center}\n          options={{\n            disableDefaultUI: true,\n            styles: mapStyles,\n          }}\n          onCenterChanged={this.movedMap}\n          onLoad={this.mapLoaded}\n        >\n          <Marker\n            position={{\n              lat: location.lat,\n              lng: location.lng,\n            }}\n            icon={{\n              url: '//maps.gstatic.com/mapfiles/mobile/mobileimgs2.png',\n              size: { height: 22, width: 22 },\n              origin: { x: 0, y: 18 },\n              anchor: { x: 11, y: 11 },\n            }}\n            zIndex={10000}\n          />\n\n          <Marker\n            position={constants.start}\n          />\n          <Marker\n            position={constants.finish}\n          />\n\n          {constants.treasures.map((treasure, index) => (\n            <Marker\n              animation={window.google.maps.Animation.DROP}\n              key={index}\n              position={treasure.position}\n              icon={{\n                url: 'acorn.svg',\n                anchor: { x: 15, y: 15 },\n              }}\n              onClick={() => this.clickTreasure(index)}\n              onLoad={((marker) => this.markerLoaded(index, marker))}\n            />\n          ))}\n\n          <Polyline\n            options={{\n              path: constants.path,\n              strokeColor: '#56A9FF',\n              strokeOpacity: 0.8,\n              strokeWeight: 4,\n            }}\n          />\n          <Polyline\n            options={{\n              path: constants.path,\n              strokeColor: '#0167CC',\n              strokeOpacity: 1,\n              strokeWeight: 1,\n            }}\n          />\n\n          {infoWindowOpen !== null &&\n            <InfoWindow\n              position={constants.treasures[infoWindowOpen].position}\n              onCloseClick={() => this.clickTreasure(null)}\n              options={{\n                pixelOffset: {height: -20, width: 0},\n              }}\n            >\n              <p>Not Close Enough!</p>\n            </InfoWindow>\n          }\n\n        </GoogleMap>\n      </StyledApp>\n    );\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}